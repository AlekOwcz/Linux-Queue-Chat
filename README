Alekander Owczarczak, 148172, Informatyka, III semestr

1. Kompilacja
W celu skompilowania projektu należy:
    I. Otworzyć katalog z projektem w terminalu.
    II. Wpisać polecenie "make" (bez "").
    III. By usunąć pliki wykonywalne należy wpisać polecenie "make clean" (bez "").

2. Uruchamianie
W celu uruchomienia projektu należy go wpierw skompilować. By uruchomić serwer należy otworzyć katalog z projektem w terminalu a następnie wpisać polecenie "./server" (bez "). By uruchomić proces klienta analogicznie wpisujemy polecenie "./client" (bez ").
UWAGA Próba jednoczesnego uruchomianie wielu serwerów poskutkuje błędem. Uruchomienie klienta bez uruchomionego serwera również poskutkuje błędem.

3. Zawartość plików

[server.c] - Plik źródłowy serwera. Składa się z procesu macierzystego i 4 procesów potomnych. Proces macierzysty zajmuje się inicjalizacją - tworzy kolejki oraz pamięć współdzieloną między procesami serwera. W pamięci współdzielonej znajdują się listy użytkowników oraz grup a także zmienne informujące procesy o aktualnym stanie działania serwera (0 - procesy mogą się kontynuować, 1 - serwer kończy działanie, procesy potomne muszą zakończyć swoje działanie). Następnie proces macierzysty wypełnia listy użytkowników i grup, będące tablicami stuktur userInfo i groupInfo, informacjami z plików users.txt i groups.txt. Po zakończeniu inicjalizacji, tworzy procesy potomne i przechodzi do oczekiwania na polecenie zakończenia serwera (wartość 1 w pamięci). Gdy je otrzyma, usuwa kolejki i pamięć współdzieloną. Pierwszy proces potomny zajmuje się przyjmowaniem ID kolejek logujących się użytkowników i zapisywaniem ich do odpowiedniego miejsca na liście użytkowników. Drugi proces potomny zajmuje się informowaniem klientów o statusie serwera (klient powinien zakończyć pracę przy utracie łączności z serwerem). Trzeci proces potomny pośredniczy w przesyłaniu wiadomomości między klientami. Odbiera on wiadomość, sprawdza jej typ i reaguje odpowiednio na polecenie przesyłając odpowiednią strukturę adresatowi oraz potwierdzenie nadawcy. Czwarty proces oczekuje na polecenie !quit. Gdy je otrzyma zmienia stan działania serwera na 1 (kończenie pracy). 

[queues.h] - Plik zawiera definicje typów struktur kolejek przesyłanych między serwerem i klientami oraz definicje typów przesyłanych wiadomości.

[commands.h] - Plik zawierający deklaracje komend klienta.

[client.c] - Plik źródłowy klienta. Składa się z Procesu macierzystego i 3 procesów potomnych. Proces macierzysty zajmuje się inicjalizacją, tworząc kolejki do komunikacji oraz pamięć współdzieloną między procesami klienta, w której przechowywany będzie stan działania klienta (0 - kontynuuj działanie, 1 - kończ pracę). Następnie tworzy procesy potomne i oczekuje aż wartość zmiennej współdzielonej przez procesy zmieni się na 1 - wówczas, usuwa on kolejki i pamięć współdzieloną. Pierwszy z procesów potomnych sprawdza połączenie z serwerem. W przypadku utraty komunikacji, próbuję połączyć się ponownie. Po kilku nie udanych próbach kończy działanie klienta. Drugi proces zajmuje się odbieraniem wiadomości tekstowych od użytkowników i grup (za pośrednictwem serwera). Ostatni z procesów potomnych wykonuje w pętli funkcję commands() nasłuchującą komend. W przypadku rozpoznania komendy, wywołuje on odpowiednią funkcję realizującą zadanie.  

[groups.c] - Plik zawierający definicje funkcji groups() wyświetlającej dostępne grupy.

[groupjoin.c] - Plik zawierający definicje funkcji groupjoin() służącej dołączeniu do grupy.

[groupleave.c] - Plik zawierający definicje funkcji groupleave() służącej odłączeniu od grupy.

[groupmessage.c] - Plik zawierający definicje funkcji usermessage() służącej wysyłaniu wiadomości do członków grupy.

[members.c] - Plik zawierający definicje funkcji members() wyświetlającej członków podanej grupy.

[online.c] - Plik zawierający definicje funkcji online() wyświetlającej użytkowników online.

[usermessage.c] - Plik zawierający definicje funkcji usermessage() służącej wysyłaniu wiadomości do użytkownika.

[login.c] - Plik zawierający definicje funkcji login() służącej logowaniu użytkownika.

[logout.c] - Plik zawierający definicje funkcji logout() wylogowującej użytkownika.

[help.c] - Plik zawierający definicje funkcji help() wyświetlającej dostępne komendy.

users.txt - Plik zawierający konta użytkowników.

groups.txt - Plik zawierający grupy i ich członków.

# Protocol
Funkcjonalność dodatkowa: priorytety wiadomości.

Wykorzystywane struktury:

typedef struct userInfo {       Struktura wykorzystywana przez serwer do łatwego przechowywania 
                                i dostępu do danych użytkownika. 
    int usrID;                  Pole przechowujące ID użytkownika.
    char usrNAME[32];           Pole przechowujące nazwę użytkownika.
    int logged;                 Pole przechowujące status zalogowania użytkownika.
    int communication;          Pole przechowujące id kolejki do komunikacji przez serwer z użytkownikiem.
} USER;

typedef struct groupInfo {      Struktura wykorzystywania przez serwer do łatwego przechowywania 
                                i dostępu do danych o grupie. 
    int groupID;                Pole przechowujące ID grupy.
    char groupNAME[32];         Pole przechowujące nazwę grupy.
    int members[64];            Pole przechowujące tablicę 0 i 1. Indeks pola tablicy powiększony 
                                o jeden odpowiada ID użykownika. 
} GROUP;                        Wartość 1 oznacza członkostwo użytkownika w grupie.

typedef struct ServerToClient {     Struktura bufora wiadomości, służąca do przekazywania serwerowi ID 
                                    prywatnej kolejki klienta do komunikacji z serwerem.
    long mtype;                     Pole przechowujące typ wiadomości.
    int ID;                         Pole przechowujące ID użytkownika.
    int queue;                      Pole przechowujące ID kolejki.
} STC;

typedef struct ConfirmationQueue {  Struktura bufora wiadomości, służąca do przekazywania klientowi 
                                    potwierdzenia wykonania żądania.
    long mtype;                     Pole przechowujące typ wiadomości.
    int confirmation;               Pole przechowujące stan potwierdzenia 1 - potwierdzono, 0 - odrzucono.
} Confirm;

typedef struct ClientServerCom {    Struktura bufora wiadomości, służąca do przekazywania serwerowi żądań.
    long mtype;                     Pole przechowujące typ wiadomości.
    int senderID;                   Pole przechowujące ID nadawcy.
    char senderName[32];            Pole przechowujące nazwę nadawcy.
    char receiverName[32];          Pole przechowujące nazwę adresata (jeśli wiadomość związana jest z innym użytkownikiem).
    char groupName[32];             Pole przechowujące nazwę (lub czasem ID w formie ciągu znaków) grupy 
                                    (jeśli wiadomość związana jest z grupą).
    char message[256];              Pole przechowujące wiadomość (jeśli jakaś jest przesyłana 
                                    innemu użytkownikowi/grupie).
} CSC;

typedef struct Message {            Struktura wykorzystywana przez serwer do przekazywania wiadomości 
                                    tekstowej użytkownikowi/grupie.
    long mtyp;                      Pole przechowujące typ wiadomości.
    char senderName[32];            Pole przechowujące nazwę nadawcy.
    char groupName[32];             Pole przechowujące nazwę grupy (jeśli wiadomość jest do niej skierowana).
    char msg[256];                  Pole przechowujące wiadomość tekstową.
} MSG;

typedef struct Logged {             Struktura wykorzystywana do przesłania klientowi listy zalogowanych użytkowników.
    long mtype;                     Pole przechowujące typ wiadomości.
    int loggedusers[64];            Pole przechowujące tablicę 0 i 1. Indeks tablicy powiększony o 1 odpowiada 
                                    ID użytkownika. Wartość 1 oznacza zalogowanie.
} LGD;

typedef struct GroupMembers {       Struktura wykorzystywana do przesłania klientowi listy członków grupy.
    long mtype;                     Pole przechowujące typ wiadomości.
    int groupmembers[64];           Pole przechowujące tablicę 0 i 1. Indeks tablicy powiększony o 1 odpowiada 
                                    ID użytkownika. Wartość 1 oznacza członkostwo w grupie.
    int conf;                       Pole przechowujące stan odnalezienia grupy. 1 - odnaleziono grupę, 0 - nie 
                                    znaleziono podanej grupy. 
} GRP;

Kolejki komunikatów:

msgFromServer - Prywatna kolejka każdego klienta, służy do odbierania wiadomości od serwera. Jej ID jest przesyłane serwerowi podczas logowania.

clientServerCom - Kolejka służąca do wysyłania żądań do serwera. Występuje zarówno w serwerze jak i w kliencie.
klucz: ftok("inf148172_s.c", 87);

receiveQueueID - Kolejka służąca wysyłaniu serwerowi ID prywatnej kolejki msgFromServer. Występuje zarówno w serwerze jak i w kliencie.
klucz: ftok("inf148172_s.c", 89)

Pamięć współdzielona:

SHMuserlist - Prywatna pamięć serwera do przechowywania tablicy struktur typu USER.
SHMgrouplist - Prywatna pamięć serwera do przechowywania tablicy struktur typu GROUP.
quitserver - Pamięc przechowująca stan pracy serwera. Wartosć 0 oznacza kontynuacja pracy. Wartość 1 sygnalizuje prosom serwera kończenie pracy.
quitclient - Odpowiednik quit server dla klienta.
shmonline - Pamięć przechowująca dostepność serwera. Wartość 0 oznacza brak komunikacji z serwerem.
klucz: ftok("inf148172_s.c", 10);
loggedSHM - Składa się z 2 komórek pamięci. Pierwsza przechowuje stan zalogowania u klienta oraz jego ID. Wartość 0 oznacza brak zalogowania, 1 - zalogowanie. Druga komórka przechowuje ID zalogowanego użytkownika. Wartość 0 oznacza brak zalogowania.
usernameSHM - Składa się z 32 bajtów. Przechowuje nazwę zalogowanego użytkownika. Pusty ciąg znaków oznacza brak zalogowania. 
